# Содержит информацию о пакетах для генерации соответствующих им Markdown-файлов
# Связан с конфигом `packages.toml`: оттуда берутся доп. сведения вроде домашней
# страницы и версии пакета

[package.binutils]
id = "binutils" # Имя созданного файла в директории с описаниями этих пакетов
description = "Утилиты для работы с объектными файлами: компоновщик, ассемблер и т.д. Требуется для компиляции программ."
sbu = 1 # ОВС
dir_pth = "cross-compiler"

[package.GCC]
id = "gcc-p1"
description = "Набор компиляторов от проекта GNU. В LFA используется только компилятор языка С (`gcc`). Первый проход сборки делается главным образом для того, чтобы можно было собрать только стандартную библиотеку C (`musl`)."
sbu = 14.8
dir_pth = "cross-compiler"

[package.GCC1]
id = "gcc-p2"
description = "Набор компиляторов от проекта GNU. В LFA используется только компилятор языка С (`gcc`). Второй проход сборки нужен для получения окончательного кросс-компилятора, использующего ранее собранную стандартную библиотеку С."
sbu = 14.8
dir_pth = "cross-compiler"

[package.musl]
id = "musl"
description = "Стандартная библиотека для языка С. Обычно используется в минималистичных или встраиваемых системах ввиду своей компактности. Предоставляет функции для выделения памяти, чтения и записи файлов, обработки строк и т.д."
dir_pth = "cross-compiler"
sbu = 5.4

[package.Linux]
id = "linux-headers"
description = "Файлы заголовков определяют способ определения функций в исходном файле. Они используются таким образом, чтобы компилятор мог проверить правильность использования функции в качестве сигнатуры функции (возвращаемое значение и параметры) в файле заголовка. Для этой задачи фактическая реализация функции не требуется."
sbu = 0.5
dir_pth = "cross-compiler"

[package.Linux1]
id = "linux"
description = "Ядро операционной системы"
sbu = 666
dir_pth = "kernel"

[package.libgcc]
id = "libgcc"
description = "При компиляции динамических библиотек с помощью GCC требуется, чтобы `libgcc` могла быть загружена во время выполнения программы. Поэтому нам нужно скопировать библиотеку `libgcc`, которая ранее была собрана для кросс-компилятора."
sbu = 0
dir_pth = "base"

[package.musl1]
id = "musl"
description = "Стандартная библиотека для языка С. Обычно используется в минималистичных или встраиваемых системах ввиду своей компактности. Предоставляет функции для выделения памяти, чтения и записи файлов, обработки строк и т.д."
sbu = 1
dir_pth = "base"

[package.lfa_init]
id = "lfa_init"
description = "Простейшая система инициализации, написанная для проекта Linux for ARM. Вместо загрузочных скриптов использует TOML-конфиги с рядом параметров, включая команды для запуска и остановки сервисов. Также имеется начальная поддержка уровней выполнения. Система инициализации предназначена для дальнейшей загрузки ОС после того, как запустилось ядро. Она выполняет запуск системных демонов и иных программ во время загрузки системы и останавливает демоны и иные запущенные программы во время отключения системы."
sbu = 0.5
dir_pth = "base"

[package.BusyBox]
id = "busybox"
description = "Крошечный вариант стандартных утилит UNIX, которые входят обычно в состав пакетов GNU Coreutils, GNU Findutils и т.д. (для дистрибутивов GNU/Linux)."
sbu = 1
dir_pth = "base"

[package.iana-etc]
id = "iana-etc"
description = "Данные для сетевых служб и протоколов"
sbu = 0.001
dir_pth = "base"

[package.u-boot]
id = "u-boot"
description = "Das U-Boot - это загрузчик операционной системы, предназначенный для встраиваемых систем на MIPS, ARM, PowerPC и т.д."
sbu = 1
dir_pth = "bootloader"
